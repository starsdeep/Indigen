/**
 * Authentication
 * @namespace indigen.authentication.services
 */
(function () {
    'use strict';

    angular
        .module('indigen.authentication.services')
        .factory('Authentication', Authentication);

    Authentication.$inject = ['$cookies', '$http'];

    /**
     * @namespace Authentication
     * @returns {Factory}
     */
    function Authentication($cookies, $http) {
        /**
         * @name Authentication
         * @desc The Factory to be returned
         */
        var Authentication = {
            getAuthenticatedAccount: getAuthenticatedAccount,
            isAuthenticated: isAuthenticated,
            login: login,
            logout: logout,
            register: register,
            setAuthenticatedAccount: setAuthenticatedAccount,
            unauthenticate: unauthenticate
        };

        return Authentication;

        ////////////////////

        // Add JWT methods here
        function parseJwt(token) {
            var base64Url = token.split('.')[1];
            var base64 = base64Url.replace('-', '+').replace('_', '/');
            return JSON.parse($window.atob(base64));
        }
        //
        function saveToken(token) {
            $window.localStorage['jwtToken'] = token;
        }
        //

        function getToken() {
            return $window.localStorage['jwtToken'];
        }

        //
        function isAuthed () {
            var token = self.getToken();
            if(token) {
                var params = self.parseJwt(token);
                return Math.round(new Date().getTime() / 1000) <= params.exp;
            } else {
                return false;
            }
        }
        
        //
        function logout() {
            $window.localStorage.removeItem('jwtToken');
        }

        // add authentication methods here
        function register(telephone, nickname, password, captcha) {
            return $http.post(API + '/auth/register', {
                telephone: telephone,
                nickname: nickname,
                password: password,
                captcha: captcha
            }).then(registerSuccessFn, registerErrorFn);

            function registerSuccessFn(data, status, headers, config) {
                Authentication.login(telephone, password);
            }

            function registerErrorFn(data, status, headers, config) {
                console.error('Epic failure!');
            }
        }

        function login(username, password) {
            return $http.post(API + '/auth/login', {
                username: username,
                password: password
            }).then(loginSuccessFn, loginErrorFn);

            function loginSuccessFn(data, status, headers, config) {
                console.log("data: " + JSON.stringify(data.data));
                Authentication.setAuthenticatedAccount(data.data);
                window.location = '/';
            }

            function loginErrorFn(data, status, headers, config) {
                console.error('Epic failure!');
            }

        };



        ///**
        // * @name register
        // * @desc Try to register a new user
        // * @param {string} telephone The telephone entered by the user
        // * @param {string} password The password entered by the user
        // * @param {string} username The username entered by the user
        // * @returns {Promise}
        // * @memberOf indigen.authentication.services.Authentication
        // */
        //function register(telephone, nickname, password, captcha) {
        //    return $http.post('/api/v1/users/', {
        //        telephone: telephone,
        //        nickname: nickname,
        //        password: password,
        //        captcha: captcha
        //    }).then(registerSuccessFn, registerErrorFn);
        //
        //    /**
        //     * @name registerSuccessFn
        //     * @desc Log the new user in
        //     */
        //    function registerSuccessFn(data, status, headers, config) {
        //        Authentication.login(telephone, password);
        //    }
        //
        //    /**
        //     * @name registerErrorFn
        //     * @desc Log "Epic failure!" to the console
        //     */
        //    function registerErrorFn(data, status, headers, config) {
        //        console.error('Epic failure!');
        //    }
        //}
        //
        //
        ///**
        // * @name login
        // * @desc Try to log in with telephone `telephone` and password `password`
        // * @param {string} telephone The telephone entered by the user
        // * @param {string} password The password entered by the user
        // * @returns {Promise}
        // * @memberOf indigen.authentication.services.Authentication
        // */
        //function login(username, password) {
        //    return $http.post('/api/v1/login/', {
        //        username: username, password: password
        //    }).then(loginSuccessFn, loginErrorFn);
        //
        //    /**
        //     * @name loginSuccessFn
        //     * @desc Set the authenticated account and redirect to index
        //     */
        //    function loginSuccessFn(data, status, headers, config) {
        //        console.log("data: " + JSON.stringify(data.data));
        //        Authentication.setAuthenticatedAccount(data.data);
        //        window.location = '/';
        //    }
        //
        //    /**
        //     * @name loginErrorFn
        //     * @desc Log "Epic failure!" to the console
        //     */
        //    function loginErrorFn(data, status, headers, config) {
        //        console.error('Epic failure!');
        //    }
        //}
        //
        ///**
        // * @name logout
        // * @desc Try to log the user out
        // * @returns {Promise}
        // * @memberOf thinkster.authentication.services.Authentication
        // */
        //function logout() {
        //    return $http.post('/api/v1/logout/')
        //        .then(logoutSuccessFn, logoutErrorFn);
        //
        //    /**
        //     * @name logoutSuccessFn
        //     * @desc Unauthenticate and redirect to index with page reload
        //     */
        //    function logoutSuccessFn(data, status, headers, config) {
        //        Authentication.unauthenticate();
        //        window.location = '/';
        //    }
        //
        //    /**
        //     * @name logoutErrorFn
        //     * @desc Log "Epic failure!" to the console
        //     */
        //    function logoutErrorFn(data, status, headers, config) {
        //        console.error('Epic failure!');
        //    }
        //}
        //
        //
        ///**
        // * @name getAuthenticatedAccount
        // * @desc Return the currently authenticated account
        // * @returns {object|undefined} Account if authenticated, else `undefined`
        // * @memberOf indigen.authentication.services.Authentication
        // */
        //function getAuthenticatedAccount() {
        //    if (!$cookies.get('authenticatedAccount')) {
        //        return;
        //    }
        //
        //    return JSON.parse($cookies.get('authenticatedAccount'));
        //}
        //
        ///**
        // * @name isAuthenticated
        // * @desc Check if the current user is authenticated
        // * @returns {boolean} True is user is authenticated, else false.
        // * @memberOf indigen.authentication.services.Authentication
        // */
        //function isAuthenticated() {
        //    return !!$cookies.get('authenticatedAccount');
        //}
        //
        ///**
        // * @name setAuthenticatedAccount
        // * @desc Stringify the account object and store it in a cookie
        // * @param {Object} user The account object to be stored
        // * @returns {undefined}
        // * @memberOf indigen.authentication.services.Authentication
        // */
        //function setAuthenticatedAccount(account) {
        //
        //    /* this the cookies set by this method is not persisting
        //     $cookies.authenticatedAccount = JSON.stringify(account);
        //     */
        //    // to make the cookies persisting, we should set the expiration date
        //    var today = new Date();
        //    var expired = new Date(today);
        //    expired.setDate(today.getDate() + 5); //Set expired date to tomorrow
        //    $cookies.put('authenticatedAccount', JSON.stringify(account), {expires: expired });
        //    console.log('cookies:' + $cookies.get('authenticatedAccount'));
        //}
        //
        ///**
        // * @name unauthenticate
        // * @desc Delete the cookie where the user object is stored
        // * @returns {undefined}
        // * @memberOf indigen.aruthentication.services.Authentication
        // */
        //function unauthenticate() {
        //    $cookies.remove('authenticatedAccount');
        //}

    }
})();